--- setup.py	2009-03-31 20:20:48.000000000 +0200
+++ setup.py.new	2009-05-27 11:59:24.000000000 +0200
@@ -1455,192 +1455,193 @@
         return missing
 
     def detect_tkinter_darwin(self, inc_dirs, lib_dirs):
-        # The _tkinter module, using frameworks. Since frameworks are quite
-        # different the UNIX search logic is not sharable.
-        from os.path import join, exists
-        framework_dirs = [
-            '/Library/Frameworks',
-            '/System/Library/Frameworks/',
-            join(os.getenv('HOME'), '/Library/Frameworks')
-        ]
-
-        # Find the directory that contains the Tcl.framework and Tk.framework
-        # bundles.
-        # XXX distutils should support -F!
-        for F in framework_dirs:
-            # both Tcl.framework and Tk.framework should be present
-            for fw in 'Tcl', 'Tk':
-                if not exists(join(F, fw + '.framework')):
-                    break
-            else:
-                # ok, F is now directory with both frameworks. Continure
-                # building
-                break
-        else:
-            # Tk and Tcl frameworks not found. Normal "unix" tkinter search
-            # will now resume.
-            return 0
-
-        # For 8.4a2, we must add -I options that point inside the Tcl and Tk
-        # frameworks. In later release we should hopefully be able to pass
-        # the -F option to gcc, which specifies a framework lookup path.
-        #
-        include_dirs = [
-            join(F, fw + '.framework', H)
-            for fw in 'Tcl', 'Tk'
-            for H in 'Headers', 'Versions/Current/PrivateHeaders'
-        ]
-
-        # For 8.4a2, the X11 headers are not included. Rather than include a
-        # complicated search, this is a hard-coded path. It could bail out
-        # if X11 libs are not found...
-        include_dirs.append('/usr/X11R6/include')
-        frameworks = ['-framework', 'Tcl', '-framework', 'Tk']
-
-        # All existing framework builds of Tcl/Tk don't support 64-bit
-        # architectures.
-        cflags = sysconfig.get_config_vars('CFLAGS')[0]
-        archs = re.findall('-arch\s+(\w+)', cflags)
-        if 'x86_64' in archs or 'ppc64' in archs:
-            try:
-                archs.remove('x86_64')
-            except ValueError:
-                pass
-            try:
-                archs.remove('ppc64')
-            except ValueError:
-                pass
-
-            for a in archs:
-                frameworks.append('-arch')
-                frameworks.append(a)
-
-        ext = Extension('_tkinter', ['_tkinter.c', 'tkappinit.c'],
-                        define_macros=[('WITH_APPINIT', 1)],
-                        include_dirs = include_dirs,
-                        libraries = [],
-                        extra_compile_args = frameworks[2:],
-                        extra_link_args = frameworks,
-                        )
-        self.extensions.append(ext)
+#        # The _tkinter module, using frameworks. Since frameworks are quite
+#        # different the UNIX search logic is not sharable.
+#        from os.path import join, exists
+#        framework_dirs = [
+#            '/Library/Frameworks',
+#            '/System/Library/Frameworks/',
+#            join(os.getenv('HOME'), '/Library/Frameworks')
+#        ]
+#
+#        # Find the directory that contains the Tcl.framework and Tk.framework
+#        # bundles.
+#        # XXX distutils should support -F!
+#        for F in framework_dirs:
+#            # both Tcl.framework and Tk.framework should be present
+#            for fw in 'Tcl', 'Tk':
+#                if not exists(join(F, fw + '.framework')):
+#                    break
+#            else:
+#                # ok, F is now directory with both frameworks. Continure
+#                # building
+#                break
+#        else:
+#            # Tk and Tcl frameworks not found. Normal "unix" tkinter search
+#            # will now resume.
+#            return 0
+#
+#        # For 8.4a2, we must add -I options that point inside the Tcl and Tk
+#        # frameworks. In later release we should hopefully be able to pass
+#        # the -F option to gcc, which specifies a framework lookup path.
+#        #
+#        include_dirs = [
+#            join(F, fw + '.framework', H)
+#            for fw in 'Tcl', 'Tk'
+#            for H in 'Headers', 'Versions/Current/PrivateHeaders'
+#        ]
+#
+#        # For 8.4a2, the X11 headers are not included. Rather than include a
+#        # complicated search, this is a hard-coded path. It could bail out
+#        # if X11 libs are not found...
+#        include_dirs.append('/usr/X11R6/include')
+#        frameworks = ['-framework', 'Tcl', '-framework', 'Tk']
+#
+#        # All existing framework builds of Tcl/Tk don't support 64-bit
+#        # architectures.
+#        cflags = sysconfig.get_config_vars('CFLAGS')[0]
+#        archs = re.findall('-arch\s+(\w+)', cflags)
+#        if 'x86_64' in archs or 'ppc64' in archs:
+#            try:
+#                archs.remove('x86_64')
+#            except ValueError:
+#                pass
+#            try:
+#                archs.remove('ppc64')
+#            except ValueError:
+#                pass
+#
+#            for a in archs:
+#                frameworks.append('-arch')
+#                frameworks.append(a)
+#
+#        ext = Extension('_tkinter', ['_tkinter.c', 'tkappinit.c'],
+#                        define_macros=[('WITH_APPINIT', 1)],
+#                        include_dirs = include_dirs,
+#                        libraries = [],
+#                        extra_compile_args = frameworks[2:],
+#                        extra_link_args = frameworks,
+#                        )
+#        self.extensions.append(ext)
         return 1
 
 
     def detect_tkinter(self, inc_dirs, lib_dirs):
-        # The _tkinter module.
-
-        # Rather than complicate the code below, detecting and building
-        # AquaTk is a separate method. Only one Tkinter will be built on
-        # Darwin - either AquaTk, if it is found, or X11 based Tk.
-        platform = self.get_platform()
-        if (platform == 'darwin' and
-            self.detect_tkinter_darwin(inc_dirs, lib_dirs)):
-            return
-
-        # Assume we haven't found any of the libraries or include files
-        # The versions with dots are used on Unix, and the versions without
-        # dots on Windows, for detection by cygwin.
-        tcllib = tklib = tcl_includes = tk_includes = None
-        for version in ['8.5', '85', '8.4', '84', '8.3', '83', '8.2',
-                        '82', '8.1', '81', '8.0', '80']:
-            tklib = self.compiler.find_library_file(lib_dirs, 'tk' + version)
-            tcllib = self.compiler.find_library_file(lib_dirs, 'tcl' + version)
-            if tklib and tcllib:
-                # Exit the loop when we've found the Tcl/Tk libraries
-                break
-
-        # Now check for the header files
-        if tklib and tcllib:
-            # Check for the include files on Debian and {Free,Open}BSD, where
-            # they're put in /usr/include/{tcl,tk}X.Y
-            dotversion = version
-            if '.' not in dotversion and "bsd" in sys.platform.lower():
-                # OpenBSD and FreeBSD use Tcl/Tk library names like libtcl83.a,
-                # but the include subdirs are named like .../include/tcl8.3.
-                dotversion = dotversion[:-1] + '.' + dotversion[-1]
-            tcl_include_sub = []
-            tk_include_sub = []
-            for dir in inc_dirs:
-                tcl_include_sub += [dir + os.sep + "tcl" + dotversion]
-                tk_include_sub += [dir + os.sep + "tk" + dotversion]
-            tk_include_sub += tcl_include_sub
-            tcl_includes = find_file('tcl.h', inc_dirs, tcl_include_sub)
-            tk_includes = find_file('tk.h', inc_dirs, tk_include_sub)
-
-        if (tcllib is None or tklib is None or
-            tcl_includes is None or tk_includes is None):
-            self.announce("INFO: Can't locate Tcl/Tk libs and/or headers", 2)
-            return
-
-        # OK... everything seems to be present for Tcl/Tk.
-
-        include_dirs = [] ; libs = [] ; defs = [] ; added_lib_dirs = []
-        for dir in tcl_includes + tk_includes:
-            if dir not in include_dirs:
-                include_dirs.append(dir)
-
-        # Check for various platform-specific directories
-        if platform == 'sunos5':
-            include_dirs.append('/usr/openwin/include')
-            added_lib_dirs.append('/usr/openwin/lib')
-        elif os.path.exists('/usr/X11R6/include'):
-            include_dirs.append('/usr/X11R6/include')
-            added_lib_dirs.append('/usr/X11R6/lib64')
-            added_lib_dirs.append('/usr/X11R6/lib')
-        elif os.path.exists('/usr/X11R5/include'):
-            include_dirs.append('/usr/X11R5/include')
-            added_lib_dirs.append('/usr/X11R5/lib')
-        else:
-            # Assume default location for X11
-            include_dirs.append('/usr/X11/include')
-            added_lib_dirs.append('/usr/X11/lib')
-
-        # If Cygwin, then verify that X is installed before proceeding
-        if platform == 'cygwin':
-            x11_inc = find_file('X11/Xlib.h', [], include_dirs)
-            if x11_inc is None:
-                return
-
-        # Check for BLT extension
-        if self.compiler.find_library_file(lib_dirs + added_lib_dirs,
-                                           'BLT8.0'):
-            defs.append( ('WITH_BLT', 1) )
-            libs.append('BLT8.0')
-        elif self.compiler.find_library_file(lib_dirs + added_lib_dirs,
-                                           'BLT'):
-            defs.append( ('WITH_BLT', 1) )
-            libs.append('BLT')
-
-        # Add the Tcl/Tk libraries
-        libs.append('tk'+ version)
-        libs.append('tcl'+ version)
-
-        if platform in ['aix3', 'aix4']:
-            libs.append('ld')
-
-        # Finally, link with the X11 libraries (not appropriate on cygwin)
-        if platform != "cygwin":
-            libs.append('X11')
-
-        ext = Extension('_tkinter', ['_tkinter.c', 'tkappinit.c'],
-                        define_macros=[('WITH_APPINIT', 1)] + defs,
-                        include_dirs = include_dirs,
-                        libraries = libs,
-                        library_dirs = added_lib_dirs,
-                        )
-        self.extensions.append(ext)
-
-##         # Uncomment these lines if you want to play with xxmodule.c
-##         ext = Extension('xx', ['xxmodule.c'])
-##         self.extensions.append(ext)
-
-        # XXX handle these, but how to detect?
-        # *** Uncomment and edit for PIL (TkImaging) extension only:
-        #       -DWITH_PIL -I../Extensions/Imaging/libImaging  tkImaging.c \
-        # *** Uncomment and edit for TOGL extension only:
-        #       -DWITH_TOGL togl.c \
-        # *** Uncomment these for TOGL extension only:
-        #       -lGL -lGLU -lXext -lXmu \
+#        # The _tkinter module.
+#
+#        # Rather than complicate the code below, detecting and building
+#        # AquaTk is a separate method. Only one Tkinter will be built on
+#        # Darwin - either AquaTk, if it is found, or X11 based Tk.
+#        platform = self.get_platform()
+#        if (platform == 'darwin' and
+#            self.detect_tkinter_darwin(inc_dirs, lib_dirs)):
+#            return
+#
+#        # Assume we haven't found any of the libraries or include files
+#        # The versions with dots are used on Unix, and the versions without
+#        # dots on Windows, for detection by cygwin.
+#        tcllib = tklib = tcl_includes = tk_includes = None
+#        for version in ['8.5', '85', '8.4', '84', '8.3', '83', '8.2',
+#                        '82', '8.1', '81', '8.0', '80']:
+#            tklib = self.compiler.find_library_file(lib_dirs, 'tk' + version)
+#            tcllib = self.compiler.find_library_file(lib_dirs, 'tcl' + version)
+#            if tklib and tcllib:
+#                # Exit the loop when we've found the Tcl/Tk libraries
+#                break
+#
+#        # Now check for the header files
+#        if tklib and tcllib:
+#            # Check for the include files on Debian and {Free,Open}BSD, where
+#            # they're put in /usr/include/{tcl,tk}X.Y
+#            dotversion = version
+#            if '.' not in dotversion and "bsd" in sys.platform.lower():
+#                # OpenBSD and FreeBSD use Tcl/Tk library names like libtcl83.a,
+#                # but the include subdirs are named like .../include/tcl8.3.
+#                dotversion = dotversion[:-1] + '.' + dotversion[-1]
+#            tcl_include_sub = []
+#            tk_include_sub = []
+#            for dir in inc_dirs:
+#                tcl_include_sub += [dir + os.sep + "tcl" + dotversion]
+#                tk_include_sub += [dir + os.sep + "tk" + dotversion]
+#            tk_include_sub += tcl_include_sub
+#            tcl_includes = find_file('tcl.h', inc_dirs, tcl_include_sub)
+#            tk_includes = find_file('tk.h', inc_dirs, tk_include_sub)
+#
+#        if (tcllib is None or tklib is None or
+#            tcl_includes is None or tk_includes is None):
+#            self.announce("INFO: Can't locate Tcl/Tk libs and/or headers", 2)
+#            return
+#
+#        # OK... everything seems to be present for Tcl/Tk.
+#
+#        include_dirs = [] ; libs = [] ; defs = [] ; added_lib_dirs = []
+#        for dir in tcl_includes + tk_includes:
+#            if dir not in include_dirs:
+#                include_dirs.append(dir)
+#
+#        # Check for various platform-specific directories
+#        if platform == 'sunos5':
+#            include_dirs.append('/usr/openwin/include')
+#            added_lib_dirs.append('/usr/openwin/lib')
+#        elif os.path.exists('/usr/X11R6/include'):
+#            include_dirs.append('/usr/X11R6/include')
+#            added_lib_dirs.append('/usr/X11R6/lib64')
+#            added_lib_dirs.append('/usr/X11R6/lib')
+#        elif os.path.exists('/usr/X11R5/include'):
+#            include_dirs.append('/usr/X11R5/include')
+#            added_lib_dirs.append('/usr/X11R5/lib')
+#        else:
+#            # Assume default location for X11
+#            include_dirs.append('/usr/X11/include')
+#            added_lib_dirs.append('/usr/X11/lib')
+#
+#        # If Cygwin, then verify that X is installed before proceeding
+#        if platform == 'cygwin':
+#            x11_inc = find_file('X11/Xlib.h', [], include_dirs)
+#            if x11_inc is None:
+#                return
+#
+#        # Check for BLT extension
+#        if self.compiler.find_library_file(lib_dirs + added_lib_dirs,
+#                                           'BLT8.0'):
+#            defs.append( ('WITH_BLT', 1) )
+#            libs.append('BLT8.0')
+#        elif self.compiler.find_library_file(lib_dirs + added_lib_dirs,
+#                                           'BLT'):
+#            defs.append( ('WITH_BLT', 1) )
+#            libs.append('BLT')
+#
+#        # Add the Tcl/Tk libraries
+#        libs.append('tk'+ version)
+#        libs.append('tcl'+ version)
+#
+#        if platform in ['aix3', 'aix4']:
+#            libs.append('ld')
+#
+#        # Finally, link with the X11 libraries (not appropriate on cygwin)
+#        if platform != "cygwin":
+#            libs.append('X11')
+#
+#        ext = Extension('_tkinter', ['_tkinter.c', 'tkappinit.c'],
+#                        define_macros=[('WITH_APPINIT', 1)] + defs,
+#                        include_dirs = include_dirs,
+#                        libraries = libs,
+#                        library_dirs = added_lib_dirs,
+#                        )
+#        self.extensions.append(ext)
+#
+###         # Uncomment these lines if you want to play with xxmodule.c
+###         ext = Extension('xx', ['xxmodule.c'])
+###         self.extensions.append(ext)
+#
+#        # XXX handle these, but how to detect?
+#        # *** Uncomment and edit for PIL (TkImaging) extension only:
+#        #       -DWITH_PIL -I../Extensions/Imaging/libImaging  tkImaging.c \
+#        # *** Uncomment and edit for TOGL extension only:
+#        #       -DWITH_TOGL togl.c \
+#        # *** Uncomment these for TOGL extension only:
+#        #       -lGL -lGLU -lXext -lXmu \
+        return 1
 
     def configure_ctypes_darwin(self, ext):
         # Darwin (OS X) uses preconfigured files, in
